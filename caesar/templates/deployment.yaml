apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.namespace }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  labels:
    app: redis
data:
  REDIS_HOST: {{ default "redis" .Values.redis.config.host }}
  REDIS_PORT: {{ default "6379" .Values.redis.config.port | quote }} 
---
apiVersion: v1
kind: Service
metadata:
  name:  redis
spec:
  selector:
    app:  redis
  type:  NodePort
  ports:
    - name:  redis-port
      port:  {{ default "6379" .Values.redis.config.port }} 
      targetPort:  {{ default "6379" .Values.redis.config.port }} 
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
spec:
  selector:
    matchLabels:
      app: redis
  serviceName: "redis"
  replicas: 1
  template:
    metadata:
      namespace: {{ .Values.namespace }}
      labels:
        app.kubernetes.io/name: {{ include "caesar.name" . }}
        helm.sh/chart: {{ include "caesar.chart" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:alpine
        envFrom:
        - configMapRef:
            name: redis-config
        ports:
        - containerPort: 5672
          name: redis-port
        volumeMounts:
        - name: redis-data
          mountPath: /var/lib/redis
  volumeClaimTemplates:
  - metadata:
      name: redis-data
      namespace: {{ .Values.namespace }}
      labels:
        app.kubernetes.io/name: {{ include "caesar.name" . }}
        helm.sh/chart: {{ include "caesar.chart" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app: redis
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "do-block-storage"
      resources:
        requests:
          storage: 5Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: caesar-server-secret
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ include "caesar.name" . }}
    helm.sh/chart: {{ include "caesar.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  APP_SECRET: {{ .Values.server.secret.app_secret | b64enc | quote }}
  SUPERADMIN_PASS: {{ .Values.server.secret.superadmin_pass | b64enc | quote }}
  BACKUP_CODE_SALT: {{ .Values.server.secret.backup_code_salt | b64enc | quote }}
  DATABASE_URL: {{ .Values.server.secret.database_url | b64enc | quote }}
  GOOGLE_ID: {{ .Values.server.secret.google_id | b64enc | quote }}
  GOOGLE_SECRET: {{ .Values.server.secret.google_secret | b64enc | quote }}
  INVITATION_SALT: {{ .Values.server.secret.invitation_salt | b64enc | quote }}
  JWT_PASSPHRASE: {{ .Values.server.secret.jwt_passphrase | b64enc | quote }}
  MAILER_URL: {{ .Values.server.secret.mailer_url | b64enc | quote }}
type: Opaque

---
apiVersion: v1
data:
  AWS_ACCESS_KEY_ID: {{ .Values.aws.secret.aws_access_key_id | b64enc | quote }}
  AWS_SECRET_ACCESS_KEY: {{ .Values.aws.secret.aws_secret_access_key | b64enc | quote }}
  BUCKET_NAME: {{ .Values.aws.secret.bucket_name | b64enc | quote }}
kind: Secret
metadata:
  name: aws-s3-secret
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ include "caesar.name" . }}
    helm.sh/chart: {{ include "caesar.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
type: Opaque

---
apiVersion: v1
kind: Secret
data:
  POSTGRES_DB: {{ .Values.postgres.secret.postgres_db | b64enc | quote }}
  POSTGRES_PASSWORD: {{ .Values.postgres.secret.postgres_password | b64enc | quote }}
  POSTGRES_USER: {{ .Values.postgres.secret.postgres_user | b64enc | quote }}
metadata:
  name: postgres-secret
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ include "caesar.name" . }}
    helm.sh/chart: {{ include "caesar.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
type: Opaque

---
apiVersion: v1
kind: Secret
metadata:
  name: rabbitmq-secret
  namespace: {{ .Values.namespace }}
  labels:
    app: rabbitmq
    app.kubernetes.io/name: {{ include "caesar.name" . }}
    helm.sh/chart: {{ include "caesar.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  ## Here are the test data! Use your real username and password
  RABBITMQ_DEFAULT_PASS: {{ .Values.rabbitmq.secret.rabbitmq_default_pass | b64enc | quote }}
  RABBITMQ_DEFAULT_USER: {{ .Values.rabbitmq.secret.rabbitmq_default_user | b64enc | quote }}
type: Opaque

---
apiVersion: v1
kind: Service
metadata:
  name:  postgres
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ include "caesar.name" . }}
    helm.sh/chart: {{ include "caesar.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  selector:
    app:  postgres
  type:  NodePort
  ports:
    - name:  postgres-port
      port:  5432
      targetPort:  5432

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: {{ .Values.namespace }}
  labels:
    app: postgres
    app.kubernetes.io/name: {{ include "caesar.name" . }}
    helm.sh/chart: {{ include "caesar.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  PGDATA: "/var/lib/postgresql/data/pgdata"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-data
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ include "caesar.name" . }}
    helm.sh/chart: {{ include "caesar.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: do-block-storage

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ include "caesar.name" . }}
    helm.sh/chart: {{ include "caesar.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:9.5
        envFrom:
          - configMapRef:
              name: postgres-config
          - secretRef:
              name: postgres-secret
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-data
          mountPath: "/var/lib/postgresql/data"
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-data  

---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: {{ .Values.namespace }}
  name: rabbitmq-config
  labels:
    app: rabbitmq
    app.kubernetes.io/name: {{ include "caesar.name" . }}
    helm.sh/chart: {{ include "caesar.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  ## Here are the test data! Use your real username and password
  RABBITMQ_HOST: "rabbitmq"
  RABBITMQ_VHOST: "/"

---
apiVersion: v1
kind: Service
metadata:
  namespace: {{ .Values.namespace }}
  name:  rabbitmq
  labels:
    app.kubernetes.io/name: {{ include "caesar.name" . }}
    helm.sh/chart: {{ include "caesar.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  selector:
    app:  rabbitmq
  type:  NodePort
  ports:
    - name:  rabbitmq-port
      port:  5672
      targetPort:  5672
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ include "caesar.name" . }}
    helm.sh/chart: {{ include "caesar.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: rabbitmq
  serviceName: "rabbitmq"
  replicas: 1
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
      - name: rabbitmq
        image: rabbitmq:3-alpine
        envFrom:
        - configMapRef:
            name: rabbitmq-config
        - secretRef:
            name: rabbitmq-secret
        ports:
        - containerPort: 5672
          name: rabbitmq-port
        volumeMounts:
        - name: rabbitmq-data
          mountPath: /var/lib/rabbitmq
  volumeClaimTemplates:
  - metadata:
      name: rabbitmq-data
      labels:
        app: rabbitmq
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "do-block-storage"
      resources:
        requests:
          storage: 1Gi
---
kind: Service
apiVersion: v1
metadata:
  name:  caesar-server
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ include "caesar.name" . }}
    helm.sh/chart: {{ include "caesar.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  selector:
    app:  caesar-server
  type:  NodePort
  ports:
    - name:  http
      port:  80
      targetPort:  80
    - name:  php-fpm
      port:  9000
      targetPort:  9000
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: caesar-server-config
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ include "caesar.name" . }}
    helm.sh/chart: {{ include "caesar.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app: caesar-server
data:
  API_URI: {{ .Values.common.config.api_uri }}
  APP_URI: {{ .Values.common.config.app_uri }}
  APP_NAME: {{ default "Caesar" .Values.app_name }}
  SENDER_ADDRESS: {{ .Values.sender_address }}
  OAUTH_ALLOWED_DOMAINS: {{ .Values.server.config.oauth_allowed_domains | quote }}
  ALLOW_FRONT_REDIRECT_PATTERN: {{ .Values.server.config.allow_front_redirect_pattern }}
  JWT_TOKEN_TTL: {{ default "86400" .Values.server.config.jwt_token_ttl | quote }}
  HTTP_X_FORWARDED_PROTO: https
  HTTPS: "on"
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: caesar-server
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ include "caesar.name" . }}
    helm.sh/chart: {{ include "caesar.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app: caesar-server
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: 50m
    nginx.org/client-max-body-size: 50m
spec:
  rules:
  - host: {{ .Values.domain }}
    http:
      paths:
      - path: /api
        backend:
          serviceName: caesar-server
          servicePort: 80
      - path: /admin
        backend:
          serviceName: caesar-server
          servicePort: 80
      - path: /bundles
        backend:
          serviceName: caesar-server
          servicePort: 80
      - path: /connect
        backend:
          serviceName: caesar-server
          servicePort: 80
      - path: /doc
        backend:
          serviceName: caesar-server
          servicePort: 80
      - path: /login
        backend:
          serviceName: caesar-server
          servicePort: 80
      - path: /login_check
        backend:
          serviceName: caesar-server
          servicePort: 80
      - path: /static/images/user/
        backend:
          serviceName: caesar-server
          servicePort: 80
  tls:
  - hosts:
    - {{ .Values.domain }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ include "caesar.name" . }}
    helm.sh/chart: {{ include "caesar.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app: caesar-server
data:
  nginx.conf: |
    events {
      worker_connections 2048;
      multi_accept on;
      use epoll;
    }

    http {
      sendfile on;
      tcp_nodelay on;
      tcp_nopush on;
      server_tokens off;
      include /etc/nginx/mime.types;
      default_type application/octet-stream;

      keepalive_timeout 15;
      types_hash_max_size 2048;
      client_body_temp_path /tmp 1 2;
      client_body_in_file_only off;
      client_max_body_size 10M;

      gzip on;
      gzip_disable "msie6";
      open_file_cache max=100;

      log_format main '$remote_addr - $upstream_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
      access_log /var/log/nginx/access.log main;
      error_log /var/log/nginx/error.log error;

      upstream php_upstream {
        server 127.0.0.1:9000;
      }

      server {
        server_name _;
        listen 80 default_server;
        listen [::]:80 default_server;
        root /var/www/html/public;

        location / {
          try_files $uri /index.php$is_args$args;
        }

        location /static/ {
          alias /var/www/html/public/static/;
          autoindex off;
        }

        location ~ ^/index\.php(/|$) {
          fastcgi_pass php_upstream;
          fastcgi_split_path_info ^(.+\.php)(/.*)$;
          include fastcgi_params;
          fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
          fastcgi_param DOCUMENT_ROOT $realpath_root;
          internal;
        }

        location ~ \.php$ { return 404; }
      }
    }
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: caesar-certificate
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ include "caesar.name" . }}
    helm.sh/chart: {{ include "caesar.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: do-block-storage
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: caesar-server
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ include "caesar.name" . }}
    helm.sh/chart: {{ include "caesar.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: caesar-server
  strategy:
    type: Recreate  
  template:
    metadata:
      labels:
        app: caesar-server
    spec:
      containers:
      - name: caesar-server
        image: "caesarteam/caesar-server:{{ .Values.server.branch }}"
        imagePullPolicy: Always
        envFrom:
        - configMapRef:
            name: caesar-server-config
        - secretRef:
            name: caesar-server-secret
        - secretRef:
            name: postgres-secret
        - secretRef:
            name: rabbitmq-secret 
        - configMapRef:
            name: rabbitmq-config
        - configMapRef:
            name: redis-config    
        ports:
        - name: php-fpm
          containerPort: 9000
        volumeMounts:
        - mountPath: /var/www/html/public
          name: caesar-shared-static
        - mountPath: /var/www/html/var/jwt
          name: caesar-certificate  
      - name: nginx
        image: "nginx:alpine"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 80
        volumeMounts:
        - mountPath: /etc/nginx/nginx.conf
          name: nginx-config-volume
          subPath: nginx.conf
        - mountPath: /var/www/html/public
          name: caesar-shared-static
      initContainers:
      - name: copy-public
        image: "caesarteam/caesar-server:{{ .Values.server.branch }}"
        imagePullPolicy: IfNotPresent
        command: [ "/bin/cp", "-r", "public/.", "public_site/" ]
        volumeMounts:
        - mountPath: /var/www/html/public_site
          name: caesar-shared-static
      securityContext:
        runAsUser: 82
        runAsGroup: 82
        fsGroup: 82
      volumes:
      - name: caesar-certificate
        persistentVolumeClaim:
          claimName: caesar-certificate
      - name: caesar-shared-static
        emptyDir:
          medium: Memory
          sizeLimit: "1Gi"
      - configMap:
          defaultMode: 256
          name: nginx-config
          optional: false
        name: nginx-config-volume

---
kind: Service
apiVersion: v1
metadata:
  name:  caesar-web-client
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ include "caesar.name" . }}
    helm.sh/chart: {{ include "caesar.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  selector:
    app:  caesar-web-client
  type:  NodePort
  ports:
    - name:  http
      port:  3000
      targetPort:  3000
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: caesar-web-client-config
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ include "caesar.name" . }}
    helm.sh/chart: {{ include "caesar.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app: caesar-web-client
data:
  MAX_UPLOADING_FILE_SIZE: {{ default "10M" .Values.max_uploading_file_size | quote }}
  TOTAL_MAX_UPLOADING_FILES_SIZES: {{ default "10M" .Values.total_max_uploading_files_sizes | quote }}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: caesar-web-client
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ include "caesar.name" . }}
    helm.sh/chart: {{ include "caesar.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app: caesar-web-client
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: 50m
    nginx.org/client-max-body-size: 50m
spec:
  rules:
  - host: {{ .Values.domain }}
    http:
      paths:
      - path: /
        backend:
          serviceName: caesar-web-client
          servicePort: 3000
  tls:
  - hosts:
    - {{ .Values.domain }}
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: caesar-web-client
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ include "caesar.name" . }}
    helm.sh/chart: {{ include "caesar.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: caesar-web-client
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  template:
    metadata:
      labels:
        app: caesar-web-client
    spec:
      containers:
      - name: caesar-web-client
        image: "caesarteam/caesar-web-client:{{ .Values.client.branch }}"
        imagePullPolicy: Always
        envFrom:
        - configMapRef:
            name: caesar-web-client-config
        - configMapRef:
            name: caesar-server-config    
        ports:
          - containerPort: 3000
            name: http
            protocol: TCP           
      imagePullSecrets:
      - name: dockerhub
      restartPolicy: Always

---

apiVersion: v1
kind: Secret
metadata:
  name: email-consumer-secret
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ include "caesar.name" . }}
    helm.sh/chart: {{ include "caesar.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app: caesar-server-email-consumer
data:
  MAILER_USER: {{ .Values.mailer.secret.mailer_user | b64enc | quote }}
  MAILER_PASSWORD: {{ .Values.mailer.secret.mailer_password | b64enc | quote }}
type: Opaque
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: email-consumer-config
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ include "caesar.name" . }}
    helm.sh/chart: {{ include "caesar.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app: caesar-server-email-consumer
data:
  MAILER_HOST: {{ .Values.mailer.config.mailer_host  | quote }}
  MAILER_PORT: {{ .Values.mailer.config.mailer_port  | quote }}
  MAILER_TLS: {{ .Values.mailer.config.mailer_tls    | quote }}
  RABBITMQ_CHANNEL: {{ default "send-message" .Values.mailer.config.rabbitmq_channel | quote }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: caesar-server-email-consumer
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ include "caesar.name" . }}
    helm.sh/chart: {{ include "caesar.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: caesar-server-email-consumer
  template:
    metadata:
      labels:
        app: caesar-server-email-consumer
    spec:
      containers:
        - name: caesar-server-email-consumer
          image: "caesarteam/caesar-server-email-consumer:{{ .Values.consumer.branch }}"
          envFrom:
            - configMapRef:
                name: rabbitmq-config  
            - configMapRef:
                name: caesar-server-config
            - configMapRef:
                name: email-consumer-config    
            - secretRef:
                name: email-consumer-secret    
            - secretRef:
                name: rabbitmq-secret  
      imagePullSecrets:
      - name: dockerhub
      restartPolicy: Always
      
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: cron-clear-message-history
spec:
  schedule: "0 12 * * *"
  concurrencyPolicy: Replace
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: clear-message-history
            image: "caesarteam/caesar-server:{{ .Values.server.branch }}"
            command: ["/usr/local/bin/php", "bin/console", "app:clear-message-history", "-e", "prod"]
            envFrom:
            - secretRef:
                name: caesar-server-secret
          restartPolicy: OnFailure